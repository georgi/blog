<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Matthias Georgi</title>
  <id>http://www.matthias-georgi.de</id>
  <updated>07 Jan 13 00:00</updated>
  <entry>
    <id>http://www.matthias-georgi.de/2013/1/how-to-write-a-blog-engine-in-haskell-part-1.html</id>
    <title type="text">How to write a blog engine in Haskell Part 1</title>
    <updated>01 Jan 13 00:00</updated>
    <content type="html">&lt;p&gt;I really like to evaluate programming languages based on their
practical value and one of the fun tasks is to write a small static
file blog engine. The engine just converts a bunch of markdown files
which are sorted into folders by month and year to html files given a
set of simple templates.&lt;/p&gt;

&lt;h2&gt;Top level structure&lt;/h2&gt;

&lt;p&gt;Basically the rendering of blog posts can be done in three steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find all files that contain blog posts&lt;/li&gt;
&lt;li&gt;Read the markdown files into records&lt;/li&gt;
&lt;li&gt;Render each file to html and write to disk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Haskell these steps could be written as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;writeBlog :: IO ()
writeBlog = do
  files &amp;lt;- findFiles &amp;quot;posts&amp;quot;
  posts &amp;lt;- mapM readPost files
  mapM_ writePost posts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When working inside the IO monad, you will use &lt;code&gt;mapM&lt;/code&gt; and &lt;code&gt;mapM_&lt;/code&gt;
quite often, similar to &lt;code&gt;map&lt;/code&gt; they have following type signatures:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mapM :: Monad m =&amp;gt; (a -&amp;gt; m b) -&amp;gt; [a] -&amp;gt; m [b]
mapM_ :: Monad m =&amp;gt; (a -&amp;gt; m b) -&amp;gt; [a] -&amp;gt; m ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They apply a monadic operation &lt;code&gt;a -&amp;gt; m b&lt;/code&gt; to each element of a list
and either you want to keep the result of each operation (mapM) or not
(mapM_).&lt;/p&gt;

&lt;p&gt;Interestingly there is a more generalized version in &lt;code&gt;Data.Traversable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(Monad m, Traversable t) =&amp;gt; (a -&amp;gt; m b) -&amp;gt; t a -&amp;gt; m (t b)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function applies the monadic operation to anything that is
traversable. So you could build a tree data type and declare it as
instance of &lt;code&gt;Data.Traversable&lt;/code&gt; and use this function to apply the
operation while maintaining the tree structure. For example a tree
of files would be converted into a tree of blog posts.&lt;/p&gt;

&lt;h2&gt;Find files&lt;/h2&gt;

&lt;p&gt;So the first step in the blog rendering process would be to find all
files containing a post. So I created a folder named &lt;code&gt;posts&lt;/code&gt; which
contains folders for each year, which in turn contain folders for each
month, which finally contain all the blog posts.&lt;/p&gt;

&lt;p&gt;What we want now is the same as the UNIX command &lt;code&gt;find posts -type f&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This can be done by looking at the entries of a folder and entering
each sub folder to examine its contents. When we find a file, we
collect it into a result list, which will contain all files
eventually.&lt;/p&gt;

&lt;p&gt;When dealing with tree structures like a file system, recursion is an
elegant alternative to iteration. For each folder we find, the function
should call itself recursively until it ends up at the bottom most
level containing the files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;findFiles :: FilePath -&amp;gt; IO [FilePath]
findFiles path = do
  isFile &amp;lt;- doesFileExist path
  if isFile then
      return [path]
    else do
      entries &amp;lt;- getEntries path
      paths &amp;lt;- return $ map (\ entry -&amp;gt; path ++ &amp;quot;/&amp;quot; ++ entry) entries
      files &amp;lt;- mapM findFiles paths
      return $ concat files
  where
    getEntries filepath = do
      contents &amp;lt;- getDirectoryContents filepath
      return $ filter ((/= &amp;#39;.&amp;#39;) . head) contents
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;findFiles&lt;/code&gt; takes a &lt;code&gt;FilePath&lt;/code&gt; and returns all files found in this
folder or its subfolders. When you pass a file it will just return a
list with this one file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getEntries&lt;/code&gt; is a small helper function which returns all entries of
a folder without &amp;#39;.&amp;#39; and &amp;#39;..&amp;#39;.&lt;/p&gt;

&lt;p&gt;The else branch works like this: it reads all entries of the folder,
prepends the current path, recurses for each entry, collects the
return values and flattens them into one big list.&lt;/p&gt;

&lt;h2&gt;Reading posts into records&lt;/h2&gt;

&lt;p&gt;The data type representing a post is super simple. It just contains
the &lt;code&gt;folder&lt;/code&gt; (e.g. &amp;ldquo;posts/2012/12&amp;rdquo;), the &lt;code&gt;file&lt;/code&gt; (e.g. &lt;code&gt;post-title.md&lt;/code&gt;)
and the &lt;code&gt;text&lt;/code&gt; of the post.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data Post = Post { folder, file, text :: String };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;readPost&lt;/code&gt; therefore takes a &lt;code&gt;FilePath&lt;/code&gt; and reads the file contents,
decomposing the path name into &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt;, which we
feed into the record constructor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;readPost :: FilePath -&amp;gt; IO Post
readPost path = do
  s &amp;lt;- readFile path
  let [_, year, month, filename] = splitOn &amp;quot;/&amp;quot; path in
    return Post { folder = year ++ &amp;quot;/&amp;quot; ++ month, file = filename, text = s }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;splitOn&lt;/code&gt; is taken from the &lt;code&gt;Data.List.Split&lt;/code&gt; module in the &lt;code&gt;split&lt;/code&gt; package
and splits a string into a list of strings given a delimiter string.&lt;/p&gt;

&lt;h2&gt;To be continued&lt;/h2&gt;

&lt;p&gt;Next part in this series will take a look at the actual rendering of blog
post using the &lt;code&gt;sundown&lt;/code&gt; package.&lt;/p&gt;
</content>
    <link href="http://www.matthias-georgi.de/2013/1/how-to-write-a-blog-engine-in-haskell-part-1.html" type="text/html" />
    <published>01 Jan 13 00:00</published>
  </entry>
  <entry>
    <id>http://www.matthias-georgi.de/2011/6/vtouch-control-ableton-live-in-a-webbrowser.html</id>
    <title type="text">vTouch - Control Ableton Live in a Webbrowser</title>
    <updated>01 Jun 11 00:00</updated>
    <content type="html">&lt;p&gt;VTouch is a multitouch browser frontend for Ableton Live. Inside your
webbrowser you can control clip triggering, volume, send and return
levels, mute, solo, record states. This works also on the network, so
you can connect your mobile phone, iPads or android tablets easily by
just browsing to you local webserver.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.matthias-georgi.de/images/vtouch.gif&quot; alt=&quot;vTouch&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Screencast&lt;/h3&gt;

&lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/qFmiIcgRIao&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;About the Hack&lt;/h3&gt;

&lt;p&gt;Ableton Live is an digital audio workstation, which is well suited for
live performances. Lots of parameters can be manipulated, midi or
audio loops can be triggered. Unfortunately it is cumbersome to use
this software with a touch device. A user interface specifically
designed to be used on multitouch devices, which is also portable
across platforms, offers many benefits and possibilities. Imagine a
whole band jamming on iPads with ohne live setup over a wireless
network.&lt;/p&gt;

&lt;h3&gt;Technology used&lt;/h3&gt;

&lt;p&gt;The frontend is rendered on HTML5 Canvas and communicates with a
nodejs server via websockets. On the backend the webserver talks to a
running ableton live instance and sends updates to all connected
clients.&lt;/p&gt;

&lt;p&gt;The canvas frontend is supported on all modern browsers including
apple mobile safari and android browsers. We created a small widget
library named canvas.ui to take care of multitouch events, rendering
and layout management.&lt;/p&gt;
</content>
    <link href="http://www.matthias-georgi.de/2011/6/vtouch-control-ableton-live-in-a-webbrowser.html" type="text/html" />
    <published>01 Jun 11 00:00</published>
  </entry>
  <entry>
    <id>http://www.matthias-georgi.de/2011/6/quick-guide-for-passenger-on-natty-narwhal.html</id>
    <title type="text">Quick Guide for Passenger on Natty Narwhal</title>
    <updated>01 Jun 11 00:00</updated>
    <content type="html">&lt;p&gt;This is a short guide for installing &lt;a href=&quot;http://www.modrails.com/&quot;&gt;Phusion Passenger&lt;/a&gt; and &lt;a href=&quot;http://www.rubyenterpriseedition.com/&quot;&gt;Ruby
Enterprise Editition&lt;/a&gt; on Ubuntu Natty Narwhal. Depending on your machine
this will take 30-60 minutes on a fresh Ubuntu install.&lt;/p&gt;

&lt;h3&gt;Installing build tools and libraries&lt;/h3&gt;

&lt;p&gt;First we need to install the compiler toolchain (make, gcc and libc)
and necessary libraries.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install build-essential zlib1g-dev libssl-dev libreadline5-dev libmysqlclient-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Ruby Enterprise Edition&lt;/h3&gt;

&lt;p&gt;We are going to download and compile Ruby Enterprise Edition. The
installer asks for the target directory.  I would recommend to install
into /opt/ruby unless you want to host different versions on this machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://rubyenterpriseedition.googlecode.com/files/ruby-enterprise-1.8.7-2011.03.tar.gz
$ tar xzf ruby-enterprise-1.8.7-2011.03.tar.gz
$ cd ruby-enterprise-1.8.7-2011.03
$ ./installer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we include the path to the ruby binaries in /etc/environment. It should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATH=&amp;quot;/opt/ruby/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After relogin you should be able to type ruby -v and get a response like this:    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby 1.8.7 (2011-02-18 patchlevel 334) [x86_64-linux], MBARI 0x6770, Ruby Enterprise Edition 2011.03
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Apache and Passenger&lt;/h3&gt;

&lt;p&gt;We need to install Apache and necessary development libraries to compile Phusion Passenger. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install libcurl4-openssl-dev apache2-mpm-prefork apache2-prefork-dev libapr1-dev libaprutil1-dev
$ passenger-install-apache2-module
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Apache configuration&lt;/h3&gt;

&lt;p&gt;The compilation of the Passenger Apache
module finished with an instruction for your httpd.conf. Depending on
you passenger version, you will get something like this, which you add
to your &lt;code&gt;/etc/apache2/httpd.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LoadModule passenger_module /opt/ruby/lib/ruby/gems/1.8/gems/passenger-3.0.7/ext/apache2/mod_passenger.so
PassengerRoot /opt/ruby/lib/ruby/gems/1.8/gems/passenger-3.0.7
PassengerRuby /opt/ruby/bin/ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you browse to your url, you should see the standard apache &amp;ldquo;It works&amp;rdquo; page.&lt;/p&gt;

&lt;h3&gt;MySQL&lt;/h3&gt;

&lt;p&gt;The Ruby Enterprise Installer already compiled Ruby&amp;#39;s mysql client
library, now we need the server and client.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install mysql-server mysql-client
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Virtual host config&lt;/h3&gt;

&lt;p&gt;Adding a virtual host for your rails application is easy. Assuming
that your application resides in /var/www/myapp create a file named
&lt;code&gt;/etc/apache2/sites-available/myapp&lt;/code&gt; and fill in :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
    ServerName myserver.com
    DocumentRoot /var/www/myapp/public
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we disable the default site and add our new virtual host:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ a2dissite default
$ a2ensite myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After restarting Apache your Rails application should run on Apache:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;
</content>
    <link href="http://www.matthias-georgi.de/2011/6/quick-guide-for-passenger-on-natty-narwhal.html" type="text/html" />
    <published>01 Jun 11 00:00</published>
  </entry>
  <entry>
    <id>http://www.matthias-georgi.de/2011/6/emacs-dark-theme.html</id>
    <title type="text">Emacs Dark Theme</title>
    <updated>01 Jun 11 00:00</updated>
    <content type="html">&lt;p&gt;Recently I updated my Emacs setup and decided to go for a more minimal
color theme. Especially on long coding nights you want a theme without
distracting colors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.matthias-georgi.de/images/emacs-dark-theme.png&quot; alt=&quot;Emacs dark theme&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Configuration&lt;/h3&gt;

&lt;p&gt;Just paste this code into your emacs condiguration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; (set-face-attribute &amp;#39;default nil
                     :background &amp;quot;grey20&amp;quot;
                     :foreground &amp;quot;grey90&amp;quot;)

 (set-face-attribute &amp;#39;modeline nil
                     :background &amp;quot;grey10&amp;quot;
                     :foreground &amp;quot;grey90&amp;quot;)

 (set-face-attribute &amp;#39;cursor nil
                     :background &amp;quot;white&amp;quot;)

 (set-face-attribute &amp;#39;font-lock-builtin-face nil
                     :foreground &amp;quot;grey60&amp;quot;)

 (set-face-attribute &amp;#39;font-lock-comment-face nil
                     :foreground &amp;quot;grey60&amp;quot;)

 (set-face-attribute &amp;#39;font-lock-constant-face nil
                     :foreground &amp;quot;grey60&amp;quot;)

 (set-face-attribute &amp;#39;font-lock-keyword-face nil
                     :foreground &amp;quot;white&amp;quot;)

 (set-face-attribute &amp;#39;font-lock-string-face nil
                     :foreground &amp;quot;white&amp;quot;)

 (set-face-attribute &amp;#39;font-lock-variable-name-face nil
                     :foreground &amp;quot;lightblue&amp;quot;)

 (set-face-attribute &amp;#39;font-lock-function-name-face nil
                     :foreground &amp;quot;lightblue&amp;quot;)

 (set-face-attribute &amp;#39;region nil
                     :background &amp;quot;#111&amp;quot;)                    
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Additional faces&lt;/h3&gt;

&lt;p&gt;If you use speedbar or elscreen, you can set additional faces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(set-face-attribute &amp;#39;speedbar-file-face nil
                    :foreground &amp;quot;white&amp;quot;)

(set-face-attribute &amp;#39;elscreen-tab-background-face nil
                    :background &amp;quot;grey10&amp;quot;
                    :foreground &amp;quot;grey90&amp;quot;)

(set-face-attribute &amp;#39;elscreen-tab-control-face nil
                    :background &amp;quot;grey20&amp;quot;
                    :foreground &amp;quot;grey90&amp;quot;)

(set-face-attribute &amp;#39;elscreen-tab-current-screen-face nil
                    :background &amp;quot;grey20&amp;quot;
                    :foreground &amp;quot;grey90&amp;quot;)

(set-face-attribute &amp;#39;elscreen-tab-other-screen-face nil
                    :background &amp;quot;grey30&amp;quot;
                    :foreground &amp;quot;grey60&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</content>
    <link href="http://www.matthias-georgi.de/2011/6/emacs-dark-theme.html" type="text/html" />
    <published>01 Jun 11 00:00</published>
  </entry>
  <entry>
    <id>http://www.matthias-georgi.de/2009/4/rackdav-web-authoring-for-rack.html</id>
    <title type="text">RackDAV - Web Authoring for Rack</title>
    <updated>01 Apr 09 00:00</updated>
    <content type="html">&lt;p&gt;RackDAV is Handler for &lt;a href=&quot;http://github.com/chneukirchen/rack&quot;&gt;Rack&lt;/a&gt;, which allows content authoring over
HTTP. RackDAV brings its own file backend, but other backends are
possible by subclassing RackDAV::Resource.&lt;/p&gt;

&lt;h2&gt;Install&lt;/h2&gt;

&lt;p&gt;Just install the gem from github:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem sources -a http://gems.github.com
$ sudo gem install georgi-rack_dav
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Quickstart&lt;/h2&gt;

&lt;p&gt;If you just want to share a folder over WebDAV, you can just start a
simple server with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rack_dav
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will start a WEBrick server on port 3000, which you can connect
to without authentication.&lt;/p&gt;

&lt;h2&gt;Rack Handler&lt;/h2&gt;

&lt;p&gt;Using RackDAV inside a rack application is quite easy. A simple rackup
script looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;#39;rubygems&amp;#39;
require &amp;#39;rack_dav&amp;#39;

use Rack::CommonLogger

run RackDAV::Handler.new(&amp;#39;/path/to/docs&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Implementing your own WebDAV resource&lt;/h2&gt;

&lt;p&gt;RackDAV::Resource is an abstract base class and defines an interface
for accessing resources.&lt;/p&gt;

&lt;p&gt;Each resource will be initialized with a path, which should be used to
find the real resource.&lt;/p&gt;

&lt;p&gt;RackDAV::Handler needs to be initialized with the actual resource class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RackDAV::Handler.new(:resource_class =&amp;gt; MyResource)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RackDAV needs some information about the resources, so you have to
implement following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;children&lt;/strong&gt;: If this is a collection, return the child resources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;collection?&lt;/strong&gt;: Is this resource a collection?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;exist?&lt;/strong&gt;: Does this recource exist?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;creation_date&lt;/strong&gt;: Return the creation time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;last_modified&lt;/strong&gt;: Return the time of last modification.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;last_modified=(time)&lt;/strong&gt;: Set the time of last modification.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;etag&lt;/strong&gt;: Return an Etag, an unique hash value for this resource.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;content_type&lt;/strong&gt;: Return the mime type of this resource.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;content_length&lt;/strong&gt;: Return the size in bytes for this resource.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most importantly you have to implement the actions, which are called
to retrieve and change the resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;get(request, response)&lt;/strong&gt;: Write the content of the resource to the response.body.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;put(request, response)&lt;/strong&gt;: Save the content of the request.body.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;post(request, response)&lt;/strong&gt;: Usually forbidden.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;delete&lt;/strong&gt;: Delete this resource.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;copy(dest)&lt;/strong&gt;: Copy this resource to given destination resource.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;move(dest)&lt;/strong&gt;: Move this resource to given destination resource.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;make_collection&lt;/strong&gt;: Create this resource as collection.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note, that it is generally possible, that a resource object is
instantiated for a not yet existing resource.&lt;/p&gt;

&lt;p&gt;For inspiration you should have a look at the FileResource
implementation. Please let me now, if you are going to implement a new
type of resource.&lt;/p&gt;

&lt;h3&gt;RackDAV on GitHub&lt;/h3&gt;

&lt;p&gt;Download or fork the project on its &lt;a href=&quot;http://github.com/georgi/rack_dav&quot;&gt;Github page&lt;/a&gt;&lt;/p&gt;
</content>
    <link href="http://www.matthias-georgi.de/2009/4/rackdav-web-authoring-for-rack.html" type="text/html" />
    <published>01 Apr 09 00:00</published>
  </entry>
  <entry>
    <id>http://www.matthias-georgi.de/2008/9/using-javascript-templates-for-a-delicious-sidebar.html</id>
    <title type="text">Using Javascript Templates for a Delicious Sidebar</title>
    <updated>01 Sep 08 00:00</updated>
    <content type="html">&lt;p&gt;Processing JSON data from an external source with Javascript templates
is a natural fit. Create a template inside your &lt;em&gt;HTML Document&lt;/em&gt; by
adding class names and variables and write a few lines for fetching
the &lt;em&gt;JSON&lt;/em&gt;, that&amp;#39;s all. This tutorial is an example for my Javascript
Template Engine called &lt;strong&gt;&lt;a href=&quot;http://www.matthias-georgi.de/2008/9/patroon-a-javascript-template-engine-part-2.html&quot;&gt;Patroon&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Writing the template&lt;/h3&gt;

&lt;p&gt;In my sidebar you can see the result of my example. My latest
bookmarks are shown as a list. Quite simple. The template looks like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;bookmarks&amp;quot;&amp;gt;
  &amp;lt;ul id=&amp;quot;bookmarks-template&amp;quot;&amp;gt;
    &amp;lt;li class=&amp;quot;bookmark&amp;quot;&amp;gt;
      &amp;lt;a href=&amp;quot;{u}&amp;quot;&amp;gt;{d}&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There a two variables here &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;. I don&amp;#39;t know if &lt;em&gt;Delicious&lt;/em&gt;
wants to save some bytes here, but descriptive names wouldn&amp;#39;t hurt in
this case. &lt;code&gt;u&lt;/code&gt; is refering to the url of the bookmark and &lt;code&gt;d&lt;/code&gt; is the
title. We are expanding an array of bookmarks into the &lt;code&gt;li&lt;/code&gt; element,
which is marked by the class name &lt;code&gt;bookmark&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Fetching the JSON Feed&lt;/h3&gt;

&lt;p&gt;The Feed resides on a different domain, so we have to use a &lt;code&gt;script&lt;/code&gt;
tag to fetch the data. This is because of security restrictions, which
limits &lt;em&gt;AJAX&lt;/em&gt; calls to the same domain of the current web page.&lt;/p&gt;

&lt;p&gt;The feed url for your bookmarks looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://feeds.delicious.com/v2/json/{username}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to fetch some of the other feeds, just look at the
&lt;a href=&quot;http://delicious.com/help/json/&quot;&gt;documentation&lt;/a&gt;, which describes 18 different feed types.&lt;/p&gt;

&lt;p&gt;A very useful option in our case is to provide a callback function,
which gets called after the &lt;em&gt;JSON&lt;/em&gt; script was loaded. We define
&lt;code&gt;renderBookmarks&lt;/code&gt; as our callback.&lt;/p&gt;

&lt;p&gt;The following code inserts the script tag to load the &lt;em&gt;Delicious&lt;/em&gt;
&lt;em&gt;JSON&lt;/em&gt; feed of my bookmarks. This is done when the page is loaded:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function() {
    var head = document.getElementsByTagName(&amp;quot;head&amp;quot;)[0];
    var script = document.createElement(&amp;#39;script&amp;#39;);

    script.setAttribute(&amp;quot;src&amp;quot;, &amp;quot;http://feeds.delicious.com/v2/json/matthias_georgi?callback=renderBookmarks&amp;quot;);
    script.setAttribute(&amp;quot;type&amp;quot;, &amp;quot;text/javascript&amp;quot;);

    head.appendChild(script);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;#39;m using jQuery here for the window load event. Other libraries would
need some other api call.&lt;/p&gt;

&lt;h3&gt;Rendering the JSON data&lt;/h3&gt;

&lt;p&gt;The code for rendering consists of just two lines. First we are
instantiating the Template. We have to provide the id of the template
node (the template is part of your document).&lt;/p&gt;

&lt;p&gt;Second we expand the template using the jQuery helper. The variable
&lt;code&gt;data&lt;/code&gt; contains just the array of bookmarks. To match the &lt;code&gt;li&lt;/code&gt; element
of the template, which has the class name &lt;code&gt;bookmark&lt;/code&gt;, we must set the
template variable &lt;code&gt;bookmark&lt;/code&gt; to hold the bookmarks array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function renderBookmarks(data) {
  var template = new Template(&amp;#39;bookmarks-template&amp;#39;);
  $(&amp;#39;.bookmarks&amp;#39;).expand(template, { bookmark: data });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Result&lt;/h3&gt;

&lt;p&gt;The resulting &lt;em&gt;HTML&lt;/em&gt; of my bookmark sidebar looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;bookmarks&amp;quot;&amp;gt;
  &amp;lt;ul id=&amp;quot;bookmarks-template&amp;quot;&amp;gt;            
    &amp;lt;li class=&amp;quot;bookmark&amp;quot;&amp;gt;
      &amp;lt;a href=&amp;quot;http://delicious.com/help/json/&amp;quot;&amp;gt;
        &amp;lt;span&amp;gt;delicious/help/feeds&amp;lt;/span&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;bookmark&amp;quot;&amp;gt;
      &amp;lt;a href=&amp;quot;http://code.google.com/apis/youtube/reference.html&amp;quot;&amp;gt;
        &amp;lt;span&amp;gt;Reference Guide: Data API Protocol - YouTube APIs and Tools - Google Code&amp;lt;/span&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;bookmark&amp;quot;&amp;gt;
      &amp;lt;a href=&amp;quot;http://rewrite.rubyforge.org/&amp;quot;&amp;gt;
      &amp;lt;span&amp;gt;rewrite&amp;lt;/span&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;bookmark&amp;quot;&amp;gt;
      &amp;lt;a href=&amp;quot;http://www.infoq.com/interviews/Rewrite-Reginald-Braithwaite&amp;quot;&amp;gt;
        &amp;lt;span&amp;gt;InfoQ: Reginald Braithwaite on Rewrite&amp;lt;/span&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may wonder, why there are extra span elements around the variable
expansions. Well this is necessary for inserting &lt;em&gt;HTML&lt;/em&gt; from a
variable. If I want to replace a text node with some &lt;em&gt;HTML&lt;/em&gt;, I have to
insert a &lt;em&gt;span&lt;/em&gt; element and use the &lt;code&gt;innerHTML&lt;/code&gt; property. If you know
something better, please let me know.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Using &lt;em&gt;Javascript&lt;/em&gt; templates with &lt;em&gt;JSON&lt;/em&gt; feeds is simple and
efficient. You write standards-compliant &lt;em&gt;HTML&lt;/em&gt; sprinkled with some
variables and expand this with some &lt;em&gt;JSON&lt;/em&gt; data, that&amp;#39;s all.&lt;/p&gt;

&lt;h3&gt;Related Work&lt;/h3&gt;

&lt;p&gt;There are some other libraries for javascript templating, which are
related to &lt;strong&gt;Patroon&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://beebole.com/pure/&quot;&gt;PURE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jsrepeater.devprog.com/&quot;&gt;jsRepeater&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/trimpath/wiki/JavaScriptTemplates&quot;&gt;TrimPath&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://embeddedjs.com/&quot;&gt;EmbeddedJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Patroon is probably the smallest templating solution around and
consists only of 130 lines of code.&lt;/p&gt;
</content>
    <link href="http://www.matthias-georgi.de/2008/9/using-javascript-templates-for-a-delicious-sidebar.html" type="text/html" />
    <published>01 Sep 08 00:00</published>
  </entry>
  <entry>
    <id>http://www.matthias-georgi.de/2008/9/shinmun-a-small-and-beautiful-blog-engine.html</id>
    <title type="text">Shinmun, a small and beautiful blog engine</title>
    <updated>01 Sep 08 00:00</updated>
    <content type="html">&lt;p&gt;Shinmun is a minimalist blog engine. You just write posts as text files,
render them to static files and push your blog to your server.&lt;/p&gt;

&lt;p&gt;This allows you to write posts in your favorite editor like Emacs or
VI and use a VCS like git.&lt;/p&gt;

&lt;p&gt;Your layout can be customized by a set of &lt;em&gt;ERB templates&lt;/em&gt;. These
templates have access to &lt;code&gt;Post&lt;/code&gt; objects and &lt;em&gt;helper methods&lt;/em&gt; so that
anybody who knows &lt;em&gt;Rails&lt;/em&gt; should feel comfortable with it.&lt;/p&gt;

&lt;h3&gt;Shinmun Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Index listing&lt;/li&gt;
&lt;li&gt;Category listing&lt;/li&gt;
&lt;li&gt;Archive listings for each month&lt;/li&gt;
&lt;li&gt;RSS feeds for index and category pages&lt;/li&gt;
&lt;li&gt;Builtin webserver for realtime rendering&lt;/li&gt;
&lt;li&gt;Compression of javascript files with PackR&lt;/li&gt;
&lt;li&gt;Included syntax highlighting through &lt;code&gt;highlight.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;AJAX comment system with PHP JSON file storage&lt;/li&gt;
&lt;li&gt;Integration of WMD-Markdown Editor for commenting&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Quickstart&lt;/h3&gt;

&lt;p&gt;Install the gem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install shinmun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download and extract the example blog from my &lt;a href=&quot;http://github.com/georgi/shinmun-example/tree/master&quot;&gt;github repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Issue the following commands and you will see the blog on
&lt;code&gt;http://localhost:3000&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd shinmun-example
shinmun server
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Writing Posts&lt;/h3&gt;

&lt;p&gt;Posts can be created by using the &lt;code&gt;shinmun&lt;/code&gt; command inside your blog folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shinmun new &amp;#39;The title of the post&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shinmun will then create a post file in the right place, for example
in &lt;code&gt;posts/2008/9/the-title-of-the-post.md&lt;/code&gt;. After creating you will
probably open the file, set the category and start writing your new
article.&lt;/p&gt;

&lt;p&gt;Now you want to look at your rendered post. Just run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shinmun server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to &lt;code&gt;http://localhost:3000&lt;/code&gt; and you will see your blog served in
realtime. Just change and save any of your posts and you will see the
new output in your browser.&lt;/p&gt;

&lt;p&gt;After finishing your post, you may run &lt;code&gt;shinmun render&lt;/code&gt; and the output
will be rendered to the &lt;em&gt;public&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;By issuing the &lt;code&gt;shinmun push&lt;/code&gt; command your blog will be pushed to your
server using rsync. This works only, if you define the blog_repository
variable inside blog.yml. It should contain something like
&lt;code&gt;user@myhost.com:/var/www/my-site/&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Post Format&lt;/h3&gt;

&lt;p&gt;Each blog post is just a text file with an optional header section and
a markup body, which are separated by a newline. Normally you don&amp;#39;t
have to worry about the post format, if you create posts with the
&lt;code&gt;shinmun new&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;first line&lt;/strong&gt; of the header should start with 3 dashes as usual
for a YAML document.&lt;/p&gt;

&lt;p&gt;The title of your post will be parsed from your first heading
according to the document type. Shinmun will try to figure out the
title for Markdown, Textile and HTML files.&lt;/p&gt;

&lt;p&gt;The yaml header may have following attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;: post will show up in blog page and archive pages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;category&lt;/code&gt;: post will show up in the defined category page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;guid&lt;/code&gt;: will be set automatically by Shinmun&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Posts without a date are by definition static pages.&lt;/p&gt;

&lt;p&gt;Example post:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--- 
category: Ruby
date: 2008-09-05
guid: 7ad04f10-5dd6-012b-b53c-001a92975b89

BlueCloth, a Markdown library
=============================

This is the summary, which is by definition the first paragraph of the
article. The summary shows up in category listings or the index listing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The guid should never change, as it will be you used for identifying
posts for comments.&lt;/p&gt;

&lt;h3&gt;Directory layout&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Your &lt;strong&gt;assets&lt;/strong&gt; are in the &lt;code&gt;assets&lt;/code&gt; folder, which gets copied to the
public folder in the render step.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;settings of your blog&lt;/strong&gt; are defined in &lt;code&gt;config/blog.yml&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your &lt;strong&gt;posts&lt;/strong&gt; reside in the &lt;code&gt;posts&lt;/code&gt; folder sorted by year/month.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your &lt;strong&gt;pages&lt;/strong&gt; are located in the &lt;code&gt;pages&lt;/code&gt; folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Template&lt;/strong&gt; files are in the &lt;code&gt;templates&lt;/code&gt; folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;index page&lt;/strong&gt; of your blog is defined in &lt;code&gt;pages/index.rhtml&lt;/code&gt; and
may be customized.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Archive pages&lt;/strong&gt; will be rendered to files like &lt;code&gt;public/2008/9/index.html&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Category pages&lt;/strong&gt; will be rendered to files like &lt;code&gt;public/categories/ruby.html&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example tree:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ assets
  + images
  + stylesheets
  + javascripts      
+ config
  + blog.yml
+ pages
  + about.md
  + index.rhtml
+ posts
  + 2007
  + 2008
    + 9
      + my-article.md
+ templates
  + feed.rxml
  + layout.rhtml
  + page.rhtml  
  + post.rhtml  
  + posts.rhtml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ public
  + index.html
  + about.html
  + categories
    + emacs.html
    + ruby.html
  + 2007   
  + 2008
    + 9
      + my-article.html
  + images
  + stylesheets
  + javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Config file&lt;/h3&gt;

&lt;p&gt;The configuration of the blog system consists of some variables
encoded as yaml file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;blog_title: the title of your blog, used for rss&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;blog_description: used for rss&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;blog_language: used for rss&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;blog_author: used for rss, acts also as fallback for the blog.author variable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;blog_url: used for rss&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;blog_repository: path for rsync, used for &lt;code&gt;shinmun push&lt;/code&gt; command&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;base_path: if your blog should not be rendered to your site
root, you can define a sub path here (like &lt;code&gt;blog&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;images_path: used for templates helper, defaults to &lt;code&gt;images&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javascripts_path: used for templates helper, defaults to &lt;code&gt;javascripts&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stylesheets_path: used for templates helper, defaults to &lt;code&gt;stylesheets&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pack_javascripts: a list of scripts to be compressed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pack_stylesheets: a list of stylesheets to be concatenated&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Layout&lt;/h3&gt;

&lt;p&gt;Layout and templates are rendered by &lt;em&gt;ERB&lt;/em&gt;.  The layout is defined in
&lt;code&gt;layout.rhtml&lt;/code&gt;. The content will be provided in the variable
&lt;code&gt;@content&lt;/code&gt;. A minimal example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;%= @blog_title %&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;%= stylesheet_link_tag &amp;#39;style&amp;#39; %&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
     &amp;lt;%= @content %&amp;gt;
  &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Helpers&lt;/h3&gt;

&lt;p&gt;There are also helper methods, which work the same way like the &lt;em&gt;Rails&lt;/em&gt;
helpers. The most important ones are these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;stylesheet_link_tag(*names)&lt;/code&gt; links a stylesheet with a timestamp&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;javascript_tag(*names)&lt;/code&gt; includes a javascript with a timestamp&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;image_tag(src, options = {})&lt;/code&gt; renders an image tag&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;link_to(text, path, options = {})&lt;/code&gt; renders a link&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stylesheets, javascripts and images should be included by using theses
helpers. The helper methods will include a timestamp of the
modification time as &lt;code&gt;querystring&lt;/code&gt;, so that the browser will fetch the
new resource if it has been changed.&lt;/p&gt;

&lt;p&gt;If you want to define your own helpers, just define a file named
&lt;code&gt;templates/helpers.rb&lt;/code&gt; with a module named &lt;code&gt;Shinmun::Helpers&lt;/code&gt;. This
module will be included into the &lt;code&gt;Shinmun::Template&lt;/code&gt; class.&lt;/p&gt;

&lt;h3&gt;Post Template&lt;/h3&gt;

&lt;p&gt;The attributes of a post are accessible as instance variables in a template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;article&amp;quot;&amp;gt;    

  &amp;lt;div class=&amp;quot;date&amp;quot;&amp;gt;
    &amp;lt;%= date @date %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;h2&amp;gt;&amp;lt;%= @title %&amp;gt;&amp;lt;/h2&amp;gt;  

  &amp;lt;%= @body %&amp;gt;

  &amp;lt;h3&amp;gt;Comments&amp;lt;/h3&amp;gt;

  &amp;lt;!-- Here you may put my commenting system --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;RSS Feeds&lt;/h3&gt;

&lt;p&gt;Feeds will be rendered by the &lt;em&gt;ERB template&lt;/em&gt;
&lt;code&gt;templates/feed.rxml&lt;/code&gt;. Some of the variables have been read from the
&lt;code&gt;blog.yml&lt;/code&gt;, like &lt;code&gt;@blog_title&lt;/code&gt;, other variables have been determined
by the engine like &lt;code&gt;@posts&lt;/code&gt; or &lt;code&gt;@category&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Packr Support&lt;/h3&gt;

&lt;p&gt;If you set the variables &lt;code&gt;pack_javascripts&lt;/code&gt; or &lt;code&gt;pack_stylesheets&lt;/code&gt;,
Shinmun will create the files &lt;code&gt;all.js&lt;/code&gt; or &lt;code&gt;all.css&lt;/code&gt; automatically
on rendering (even on each request of the webserver).&lt;/p&gt;

&lt;p&gt;The Javascript will be compressed with Packr and for performance
reasons, minified versions for each of your javascripts will be
created automatically in &lt;code&gt;assets/javascripts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The stylesheets will be just concatenated to one file named &lt;code&gt;all.css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that you define a yaml array of filenames without file
extensions, so it should like &lt;code&gt;[jquery, jquery-form]&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Commenting System&lt;/h3&gt;

&lt;p&gt;As I am not willing to build up a whole Rails stack for a single blog,
I was looking for a simple storage for comments. I really like the
JSON format. It works seamlessly with Javascript libraries and can be
serialized and deserialized from almost any language.&lt;/p&gt;

&lt;p&gt;Read about my &lt;a href=&quot;http://www.matthias-georgi.de/commenting-system-with-lightweight-json-store.html&quot;&gt;lightweight commenting system&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Download&lt;/h3&gt;

&lt;p&gt;Simply install the gem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install shinmun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download or fork the package at my &lt;a href=&quot;http://github.com/georgi/shinmun/tree/master&quot;&gt;github repository&lt;/a&gt;&lt;/p&gt;
</content>
    <link href="http://www.matthias-georgi.de/2008/9/shinmun-a-small-and-beautiful-blog-engine.html" type="text/html" />
    <published>01 Sep 08 00:00</published>
  </entry>
  <entry>
    <id>http://www.matthias-georgi.de/2008/9/relax-ng-schema-for-adobe-flex-3.html</id>
    <title type="text">Relax NG Schema for Adobe Flex 3</title>
    <updated>01 Sep 08 00:00</updated>
    <content type="html">&lt;p&gt;In the past Flex development on Emacs was not as it should be because
of a missing Relax NG Schema, which is needed for nxml-mode to work
properly. To improve the situation I developed a MXML Schema generator
based on the &lt;a href=&quot;http://code.google.com/p/xsd4mxml/&quot;&gt;XSD generator&lt;/a&gt; of &lt;a href=&quot;http://flexiglas.blogspot.com/&quot;&gt;Ali Mansuroglu&lt;/a&gt;. Now Emacs
knows your Schema and can help you typing and validating MXML files.&lt;/p&gt;

&lt;h3&gt;Emacs NXML completion&lt;/h3&gt;

&lt;p&gt;Editing MXML files is now a breeze with the superb completion features
of nxml-mode on Emacs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;completion of tag names&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;completion of attribute keys&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;completion of attribute values (e.g. enumerations)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;How does it work?&lt;/h3&gt;

&lt;p&gt;The schema generator reads a manifest file with all classes to be
exported.  Now for each class the generator asks the runtime to
provide the needed information about attributes, events and
styles (the flash runtime has a nice function called &lt;code&gt;describeType&lt;/code&gt;,
which returns a XML representation of a type).&lt;/p&gt;

&lt;p&gt;The tricky part is to convince the &lt;em&gt;MXML&lt;/em&gt; compiler to include all
classes and metadata into the &lt;em&gt;SWF&lt;/em&gt; file. Thanks to Ali, I needn&amp;#39;t to
figure this out, as he provides an Ant file which already has the
needed compiler flags.&lt;/p&gt;

&lt;h3&gt;How does the schema look like?&lt;/h3&gt;

&lt;p&gt;The schema just lists all class names as elements and lists their
properties, events and styles as attributes. Furthermore as much type
information is preserved as possible using xsd types. So for example
the &lt;code&gt;dropdownWith&lt;/code&gt; of a &lt;code&gt;ComboBox&lt;/code&gt; must be a float. XML Editors like
nxml-mode in Emacs can validate this as yout type.&lt;/p&gt;

&lt;p&gt;This is just a snippet from the schema file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grammar {
  ComboBox = element ComboBox {
    attribute implements { text }?,
    attribute labelFunction { text }?,
    attribute labelField { xsd:string }?,
    attribute dropdownWidth { xsd:float }?
    ....
  }      
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;#39;m using named patterns here, because I need a pattern which matches
a choice of all possible components:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;any = Accordion
| AddChild
| AddChildAction
| AddItemAction
| AnimateProperty ....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why do I need this pattern? Well, all container components may have
child components and to enable this in the schema, the conteiner
elements have this pattern inside:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Application = element Application {
  any?,
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Problems&lt;/h3&gt;

&lt;p&gt;There are some known issues, which are not resolved yet. For example
the &lt;code&gt;Script&lt;/code&gt; tag may have a &lt;code&gt;CDATA&lt;/code&gt; element inside. Another ugly issue
is the color syntax. Inside the Flex framework a color is just an
integer, but we want to specify colors as hex values. Unfortunately
xsd:integer does not allow hex values, so I have to find a solution
for this some day.&lt;/p&gt;

&lt;h3&gt;Download&lt;/h3&gt;

&lt;p&gt;Download the &lt;a href=&quot;http://www.matthias-georgi.de/assets/download/flex3.rnc&quot;&gt;Relax NG Compact Schema for Adoble Flex 3&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Github&lt;/h3&gt;

&lt;p&gt;Watch or fork the &lt;a href=&quot;http://github.com/georgi/mxml-rnc&quot;&gt;Project on Github&lt;/a&gt;&lt;/p&gt;
</content>
    <link href="http://www.matthias-georgi.de/2008/9/relax-ng-schema-for-adobe-flex-3.html" type="text/html" />
    <published>01 Sep 08 00:00</published>
  </entry>
  <entry>
    <id>http://www.matthias-georgi.de/2008/9/quick-guide-for-passenger-on-ubuntu-hardy.html</id>
    <title type="text">Quick Guide for Passenger on Ubuntu Hardy</title>
    <updated>01 Sep 08 00:00</updated>
    <content type="html">&lt;p&gt;This is a short guide for installing &lt;a href=&quot;http://www.modrails.com/&quot;&gt;Phusion Passenger&lt;/a&gt; on Ubuntu
Hardy. This includes the installation of Ruby 1.8.6, Apache 2.2.8, 
MySQL 5.0.51a, Git 1.5.4 and Rails 2.1.1.&lt;/p&gt;

&lt;h3&gt;Essential Build Tools&lt;/h3&gt;

&lt;p&gt;First we need to install the compiler toolchain (make, gcc and libc).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install build-essential
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Git&lt;/h3&gt;

&lt;p&gt;This guide is based on Git, so we install the git package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install git-core
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to host a git repository on this machine, initialize a new
repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir /var/git
$ mkdir /var/git/myapp
$ cd /var/git/myapp
$ git --bare init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can push your application code from your local machine to your
repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/myapp
$ git remote add origin ssh://myserver.com/var/git/myapp
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Ruby&lt;/h3&gt;

&lt;p&gt;We are going to install Ruby and all the essential ruby libraries.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install ruby ruby1.8-dev rubygems irb ri rdoc rake libruby libruby-extras
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Gem Executable Path&lt;/h3&gt;

&lt;p&gt;Strangely the &lt;em&gt;rubygems&lt;/em&gt; package does not setup the path for
executables, so we add the following line to &lt;code&gt;/etc/profile&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=/var/lib/gems/1.8/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To immediately use the new executable path, we source the profile file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ . /etc/profile
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Apache&lt;/h3&gt;

&lt;p&gt;This is just a basic Apache install. We need the devlopment files for compiling passenger:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install apache2 apache2-prefork-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;MySQL&lt;/h3&gt;

&lt;p&gt;I use MySQL, so I needed to install the server and client packages and
the Ruby gem, which compiles a native extension:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install mysql-server mysql-client
$ gem install mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Phusion Passenger&lt;/h3&gt;

&lt;p&gt;This is now the actual Passenger install, which consists of installing
a gem and compiling the Apache module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install passenger
$ passenger-install-apache2-module
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Apache configuration&lt;/h3&gt;

&lt;p&gt;The compilation of the Passenger Apache
module finished with an instruction for your httpd.conf. Depending on
you passenger version, you will get something like this, which you add
to your &lt;code&gt;/etc/apache2/httpd.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LoadModule passenger_module /var/lib/gems/1.8/gems/passenger-2.0.3/ext/apache2/mod_passenger.so
PassengerRoot /var/lib/gems/1.8/gems/passenger-2.0.3
PassengerRuby /usr/bin/ruby1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally you probably want to enable &lt;em&gt;mod_rewrite&lt;/em&gt;, which is
needed for Rails:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ a2enmod rewrite
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Installing your Rails app&lt;/h3&gt;

&lt;p&gt;We create a app folder in &lt;code&gt;/var/www&lt;/code&gt; and checkout the source from our
git repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /var/www
$ mkdir myapp
$ cd myapp
$ git init
$ git remote add origin /var/git/myapp
$ git pull origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Installing Rails&lt;/h4&gt;

&lt;p&gt;We don&amp;#39;t install Rails as Gem, because your application should be
pinned to a specific Rails version. Git submodules allow you to embed
a foreign repository in your source tree. &lt;/p&gt;

&lt;p&gt;We are now going to link the Rails repository to &lt;code&gt;vendor/rails&lt;/code&gt; and
checking out Version 2.1.1, finally we commit the submodule link to
our repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /var/www/myapp/
$ git submodule add git://github.com/rails/rails.git vendor/rails
$ cd vendor/rails
$ git checkout v2.1.1
$ cd ../..
$ git commit -m &amp;#39;linked rails as submodule&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Probably you need to setup your database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mysaladmin create myapp_production
$ mysaladmin create myapp_development
$ mysaladmin create myapp_test
$ rake db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your Rails app should be able to run as a Webrick Server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./script/server
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Virtual host&lt;/h3&gt;

&lt;p&gt;Adding a virtual host for your rails application is now super easy
thanks to Passenger. Create a file named
&lt;code&gt;/etc/apache2/sites-available/myapp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
    ServerName myserver.com
    DocumentRoot /var/www/myapp/public
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we disable the default site and add our new virtual host:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ a2dissite default
$ a2ensite myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After restarting Apache your Rails application should run on Apache:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;User authentication&lt;/h3&gt;

&lt;p&gt;In case your Rails app is not meant to be seen on public, I recommend
protecting it with HTTP Authentication.&lt;/p&gt;

&lt;p&gt;Create a password file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;htpasswd2 /var/www/myapp/config/auth myusername
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add this to your virtual host configuration (Inside the
VirtualHost section):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Location /&amp;gt;
    AuthType Basic
    AuthName &amp;quot;My App&amp;quot;
    AuthUserFile /var/www/myapp/config/auth
    Require valid-user
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Phusion Passenger simplifies the Installation of Rails applications
significantly. I don&amp;#39;t have to worry about &lt;code&gt;mod_proxy&lt;/code&gt;,
&lt;code&gt;mod_proxy_balancer&lt;/code&gt;, &lt;code&gt;mongrel&lt;/code&gt; and &lt;code&gt;mongrel_cluster&lt;/code&gt; or even
FastCGI. This is &lt;strong&gt;definitely simpler&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I have to mention, that Rails is just one option for your Ruby
application. Setting up any other Ruby framework should be possible
through the support of the &lt;a href=&quot;http://rack.rubyforge.org/&quot;&gt;Rack&lt;/a&gt; interface. &lt;/p&gt;

&lt;p&gt;I really hope, that the specification of using one &lt;em&gt;rackup file&lt;/em&gt; and
one &lt;em&gt;public folder&lt;/em&gt; will settle down as a standard for Ruby web
applications, so that hosting companies will focus on supporting this
standard and ruby developers don&amp;#39;t need to worry about finding support
for their favorite web frameworks.&lt;/p&gt;
</content>
    <link href="http://www.matthias-georgi.de/2008/9/quick-guide-for-passenger-on-ubuntu-hardy.html" type="text/html" />
    <published>01 Sep 08 00:00</published>
  </entry>
  <entry>
    <id>http://www.matthias-georgi.de/2008/9/patroon-a-javascript-template-engine.html</id>
    <title type="text">Patroon - a Javascript Template Engine</title>
    <updated>01 Sep 08 00:00</updated>
    <content type="html">&lt;p&gt;Patroon is a template engine written in Javascript in about 100 lines
of code. It takes existing DOM nodes annotated with CSS classes and
expand a data object according to simple rules. Additionally you may
use traditional string interpolation inside attribute values and text
nodes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;
Patroon has its own &lt;a href=&quot;/patroon&quot;&gt;project page&lt;/a&gt; now!
Please look for current information there.
&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Example&lt;/h3&gt;

&lt;p&gt;Comments in this blog are stored as a list of JSON objects, I wrote about it &lt;a href=&quot;http://www.matthias-georgi.de/commenting-system-with-lightweight-json-store.html&quot;&gt;here&lt;/a&gt;. So think about a data object like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var data = { 
  comment: [{
    date: &amp;quot;2008-09-07 12:28:33&amp;quot;, 
    name: &amp;quot;David Beckham&amp;quot;,
    website: &amp;quot;beckham.com&amp;quot;,
    text: &amp;quot;I watched the euro finals on tv...&amp;quot; 
  }, { 
    date: &amp;quot;2008-09-07 14:28:33&amp;quot;, 
    name: &amp;quot;Tuncay&amp;quot;,
    website: &amp;quot;&amp;quot;,
    text: &amp;quot;Me too&amp;quot;
  }]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This data will be expanded with help of following template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;  
  &amp;lt;div id=&amp;quot;comments-template&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;comment&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;_ top&amp;quot;&amp;gt;
        &amp;lt;a class=&amp;quot;_&amp;quot; href=&amp;quot;{website}&amp;quot;&amp;gt;{name}&amp;lt;/a&amp;gt; said
        &amp;lt;a class=&amp;quot;_&amp;quot; title=&amp;quot;{time}&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;:
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;   
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The javascript to actually execute this template looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// The comments template will be removed from the DOM!
var template = new Template(&amp;#39;comments-template&amp;#39;);

// template will result in a new DOM node
var result = template.expand(data);

// insert the resulting node into the comments container
var container = document.getElementsByClassName(&amp;#39;comments&amp;#39;)[0];
container.appendChild(result);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using jQuery the code gets a bit cleaner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// The comments template will be removed from the DOM!
var template = new Template(&amp;#39;comments-template&amp;#39;);

// Expand the template into the comments section
$(&amp;#39;.comments&amp;#39;).expand(template, data);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Basic Rules&lt;/h3&gt;

&lt;p&gt;There are 5 basic rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Strings and Numbers are inserted by innerHTML to the current node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arrays repeat the current node and process its elements recursively in same scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Objects trigger a class name lookup by property name. The value of each property is expanded recursively in new scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code will be evaluated for text surounded with braces (Works also for attributes).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Processing child nodes will be triggered for nodes with a class attribute starting with &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I admit the last point is a bit quirky, but processing all child nodes per default is too expensive and too unpredictable. Maybe I will find a better way, but I don’t mind inserting these extra &lt;code&gt;_&lt;/code&gt; class names.&lt;/p&gt;

&lt;h3&gt;Evaluation&lt;/h3&gt;

&lt;p&gt;So speaking of the example data, this would mean following algorithm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Find the first node with a class name of comment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Repeat this node two times and recursively process the first and second comment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Descend into the node with class &lt;code&gt;top&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Descend into the first link node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Evaluate the code found in the &lt;em&gt;href&lt;/em&gt; attribute and in the text.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Descend into the second link node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Evaluate the code found in the &lt;em&gt;title&lt;/em&gt; attribute.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the first node with the class &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Insert the the text of the comment into the found node.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that we are dealing with two scopes here: the global scope and the comment scope. The global scope just contains a name &lt;em&gt;comment&lt;/em&gt; and the comment scope contains the names &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;website&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Download&lt;/h3&gt;

&lt;p&gt;Download the script at my &lt;a href=&quot;http://github.com/georgi/patroon/tree/master&quot;&gt;github repository&lt;/a&gt;.&lt;/p&gt;
</content>
    <link href="http://www.matthias-georgi.de/2008/9/patroon-a-javascript-template-engine.html" type="text/html" />
    <published>01 Sep 08 00:00</published>
  </entry>
</feed>